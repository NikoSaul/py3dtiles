# -*- coding: utf-8 -*-

import unittest
import numpy as np
import binascii
# np.set_printoptions(formatter={'int':hex})

from py3dtiles import TileReader, Tile, Feature, B3dm, GlTF

"""
class TestTileReader(unittest.TestCase):

    def test_read(self):
        tile = TileReader().read_file('tests/pointCloudRGB.pnts')

        self.assertEqual(tile.header.version, 1.0)
        self.assertEqual(tile.header.tile_byte_length, 15176)
        self.assertEqual(tile.header.ft_json_byte_length, 148)
        self.assertEqual(tile.header.ft_bin_byte_length, 15000)
        self.assertEqual(tile.header.bt_json_byte_length, 0)
        self.assertEqual(tile.header.bt_bin_byte_length, 0)

        feature_table = tile.body.feature_table
        feature = feature_table.feature(0)
        dcol_res = {'Red': 44, 'Blue': 209, 'Green': 243}
        self.assertDictEqual(dcol_res, feature.colors)
"""

class TestTileBuilder(unittest.TestCase):

    def test_build(self):
        wkb = binascii.unhexlify("01f70300000f00000001eb03000001000000050000000000240857001fc0000000f0c16b1dc000514b73bb89fe3f0000c0b4a83f1fc00000805ad3fcf7bf00514b73bb89fe3f0000c0b4a83f1fc00000805ad3fcf7bf40ba11164d6e00c00000240857001fc0000000f0c16b1dc040ba11164d6e00c00000240857001fc0000000f0c16b1dc000514b73bb89fe3f01eb030000010000000500000000003023f5be0f40000040800ced1cc000514b73bb89fe3f0000240857001fc0000000f0c16b1dc000514b73bb89fe3f0000240857001fc0000000f0c16b1dc040ba11164d6e00c000003023f5be0f40000040800ced1cc040ba11164d6e00c000003023f5be0f40000040800ced1cc000514b73bb89fe3f01eb030000010000000500000000003023f5be0f40000040800ced1cc040ba11164d6e00c00000f8c951400f400000c09bfd01f6bf40ba11164d6e00c00000f8c951400f400000c09bfd01f6bf00514b73bb89fe3f00003023f5be0f40000040800ced1cc000514b73bb89fe3f00003023f5be0f40000040800ced1cc040ba11164d6e00c001eb03000001000000050000000000d8f6769b21400000c0b12e2ef5bf40ba11164d6e00c000002477d86c2140000010527e321d4040ba11164d6e00c000002477d86c2140000010527e321d4000895fb14e6e00400000d8f6769b21400000c0b12e2ef5bf00895fb14e6e00400000d8f6769b21400000c0b12e2ef5bf40ba11164d6e00c001eb030000010000000500000000002477d86c2140000010527e321d4040ba11164d6e00c000009a5ab67e21c000006024b4751c4040ba11164d6e00c000009a5ab67e21c000006024b4751c4000895fb14e6e004000002477d86c2140000010527e321d4000895fb14e6e004000002477d86c2140000010527e321d4040ba11164d6e00c001eb030000010000000500000000005ab9175021c0000080685721f8bf00895fb14e6e004000009a5ab67e21c000006024b4751c4000895fb14e6e004000009a5ab67e21c000006024b4751c4040ba11164d6e00c000005ab9175021c0000080685721f8bf40ba11164d6e00c000005ab9175021c0000080685721f8bf00895fb14e6e004001eb03000001000000040000000000c0b4a83f1fc00000805ad3fcf7bf00895fb14e6e00400000dc09f67720c00000c0e7150ff8bf40ba11164d6e00c00000c0b4a83f1fc00000805ad3fcf7bf00514b73bb89fe3f0000c0b4a83f1fc00000805ad3fcf7bf00895fb14e6e004001eb03000001000000040000000000c0b4a83f1fc00000805ad3fcf7bf00514b73bb89fe3f0000dc09f67720c00000c0e7150ff8bf40ba11164d6e00c00000c0b4a83f1fc00000805ad3fcf7bf40ba11164d6e00c00000c0b4a83f1fc00000805ad3fcf7bf00514b73bb89fe3f01eb03000001000000040000000000dc09f67720c00000c0e7150ff8bf40ba11164d6e00c000005ab9175021c0000080685721f8bf00895fb14e6e004000005ab9175021c0000080685721f8bf40ba11164d6e00c00000dc09f67720c00000c0e7150ff8bf40ba11164d6e00c001eb03000001000000040000000000c0b4a83f1fc00000805ad3fcf7bf00895fb14e6e004000005ab9175021c0000080685721f8bf00895fb14e6e00400000dc09f67720c00000c0e7150ff8bf40ba11164d6e00c00000c0b4a83f1fc00000805ad3fcf7bf00895fb14e6e004001eb03000001000000040000000000d8f6769b21400000c0b12e2ef5bf00895fb14e6e0040000054698b6b1940000000ad1698f5bf40ba11164d6e00c00000d8f6769b21400000c0b12e2ef5bf40ba11164d6e00c00000d8f6769b21400000c0b12e2ef5bf00895fb14e6e004001eb03000001000000040000000000d8f6769b21400000c0b12e2ef5bf00895fb14e6e00400000f8c951400f400000c09bfd01f6bf00895fb14e6e0040000054698b6b1940000000ad1698f5bf40ba11164d6e00c00000d8f6769b21400000c0b12e2ef5bf00895fb14e6e004001eb0300000100000004000000000054698b6b1940000000ad1698f5bf40ba11164d6e00c00000f8c951400f400000c09bfd01f6bf00895fb14e6e00400000f8c951400f400000c09bfd01f6bf00514b73bb89fe3f000054698b6b1940000000ad1698f5bf40ba11164d6e00c001eb0300000100000004000000000054698b6b1940000000ad1698f5bf40ba11164d6e00c00000f8c951400f400000c09bfd01f6bf00514b73bb89fe3f0000f8c951400f400000c09bfd01f6bf40ba11164d6e00c0000054698b6b1940000000ad1698f5bf40ba11164d6e00c001eb03000001000000050000000000f8c951400f400000c09bfd01f6bf00895fb14e6e00400000c0b4a83f1fc00000805ad3fcf7bf00895fb14e6e00400000c0b4a83f1fc00000805ad3fcf7bf00514b73bb89fe3f0000f8c951400f400000c09bfd01f6bf00514b73bb89fe3f0000f8c951400f400000c09bfd01f6bf00895fb14e6e0040")
        # TODO: put in file

        box = [[-8.74748499994166, -7.35523200035095, -2.05385796777344], [8.8036420000717, 7.29930999968201, 2.05386103222656]]
        transform = np.array([
            [1,0,0,1842015.125],
            [0,1,0,5177109.25],
            [0,0,1,247.87364196777344],
            [0,0,0,1]], dtype=float) # translation : 1842015.125, 5177109.25, 247.87364196777344
        transform = transform.flatten('F')
        glTF = GlTF.from_wkb([wkb], [box], transform)
        t = B3dm.from_glTF(glTF)

        # get an array
        tile_arr = t.to_array()
        self.assertEqual(t.header.version, 1.0)
        #self.assertEqual(t.header.tile_byte_length, 15176)
        self.assertEqual(t.header.bt_json_byte_length, 0)
        self.assertEqual(t.header.bt_bin_byte_length, 0)
        self.assertEqual(t.header.bt_length, 0)

        t.save_as("/tmp/py3dtiles_test_build_1.b3dm")
